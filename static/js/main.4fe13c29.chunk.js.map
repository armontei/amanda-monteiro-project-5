{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","handleInput","e","setState","userInput","target","value","handleAdd","room","preventDefault","dbRef","database","ref","roomId","newTask","task","state","complete","child","push","completeTask","taskKey","update","removeTask","remove","rooms","on","data","firebaseDataObj","val","objArray","Object","keys","map","key","className","this","i","tasks","newArray","taskId","realTasks","onClick","htmlFor","type","id","onChange","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fe13c29.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// configuration object\r\nconst config = {\r\n    apiKey: \"AIzaSyDjFLGw9uZxi2bKP7M5iAYTKa8mZ1b8v74\",\r\n    authDomain: \"cleannie-8323c.firebaseapp.com\",\r\n    databaseURL: \"https://cleannie-8323c.firebaseio.com\",\r\n    projectId: \"cleannie-8323c\",\r\n    storageBucket: \"cleannie-8323c.appspot.com\",\r\n    messagingSenderId: \"739127105460\",\r\n    appId: \"1:739127105460:web:9eedebd42440fa4d51c4e1\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;","import './App.scss';\nimport { Component } from 'react';\nimport firebase from './firebase';\n// import Rooms from './components/Rooms';\n\nclass App extends Component {\n\n  // getting all the rooms\n  constructor(props) {\n    super(props);\n    this.state = {\n      rooms: [],\n      userInput: '',\n    }\n  }\n\n  componentDidMount() {\n    // firebase database\n    const dbRef = firebase.database().ref();\n\n    // getting data from firebase\n    dbRef.on('value', (data) => {\n\n      const firebaseDataObj = data.val();\n\n      const objArray = Object.keys(firebaseDataObj).map((key) => [(key), firebaseDataObj[key]]);\n\n\n      this.setState({\n        rooms: objArray\n      })\n\n    })\n  }\n\n\n  // getting input from the user for new tasks they want to add\n  handleInput = (e) => {\n\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  // adding the new task to the page\n  handleAdd = (e, room) => {\n    // prevent form fro refreshing the page on submit\n    e.preventDefault();\n    \n    const dbRef = firebase.database().ref();\n\n    let roomId = `/${room[0]}/`\n\n    // object structure which new task will be added\n    const newTask = {\n      task: this.state.userInput,\n      complete: \"no\"\n    }\n\n    // adding a new task in the form of a child element to the specified room\n    dbRef.child(roomId).push(newTask);\n  }\n\n  // complete task\n  completeTask = (taskKey, room) => {\n    const dbRef = firebase.database().ref();\n    let roomId = `/${room[0]}/`\n\n    dbRef.child(roomId + taskKey).update({\n      complete: \"yes\"\n    })\n  }\n\n  // removing tasks\n  removeTask = (taskKey, room) => {\n    const dbRef = firebase.database().ref();\n    let roomId = `/${room[0]}/`\n\n    dbRef.child(roomId + taskKey).remove()\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        {/* HEADER SECTION */}\n        <header>\n          <div className=\"headerOverlay\">\n            <h1 className=\"wrapper\">I Dream of Cleannie</h1>\n            <h2 className=\"wrapper\">Keep track of everything in your home you need to clean</h2>\n          </div>\n        </header>\n\n        {/* MAIN SECTION */}\n        <main className=\"wrapper\">\n\n          {/* mapping through initial array with rooms and task objects inside each room */}\n          {this.state.rooms.map((room, i) => {\n\n            // creating another array with tasks to map through\n            let tasks = [room[1]];\n\n              return (\n                \n                <ul>\n                  {/* displaying names of all the rooms */}\n                  <h3 key={i}>{room[0]}</h3>\n\n                  {/* mapping through the tasks associated with the room */}\n                  {tasks.map(task => {\n\n                    // creating a new array outside for loop because if the return is inside the for loop only the first item will be returned and not the rest of the items\n                    let newArray = [];\n\n                    // mapping through task objects so it can be turned into an array to extract information\n                    for (let taskId in task) {\n\n                      // getting the task ID, task name, and completed status inside an array\n                      newArray.push([taskId, task[taskId].task, task[taskId].complete]);\n\n                    }\n\n                    return (\n                      <div>\n\n                        {/* mapping through the new array with created with all the task values */}\n                        { newArray.map( realTasks => {\n                          \n                          return (\n\n                            // displaying the tasks to the page along with a button to remove the task\n                            <li key={realTasks[0]}>\n                              <button onClick={() => { this.completeTask(realTasks[0], room) }} className={realTasks[2] + \"Btn\"}></button>\n                              <p className={realTasks[2]}>{realTasks[1]}</p>\n                              <button onClick={() => { this.removeTask(realTasks[0], room) }} className=\"removeBtn\">remove</button>\n                            </li>\n                            \n                          )\n\n                        })}\n\n                      </div>\n                    )\n\n                  })\n                  }\n\n                  {/* ADD TASK FORM SECTION */}\n                  <form key={room[0]}>\n                    <label htmlFor=\"newTask\" className=\"srOnly\">Add new task</label>\n                    <input type=\"text\" id=\"newTask\" onChange={this.handleInput} />\n                    <button onClick={ (e) => {this.handleAdd(e, room)} } className=\"addBtn\">Add Task</button>\n                  </form>\n\n                </ul>\n              )            \n          })\n          }\n\n        </main>\n\n        {/* FOOTER SECTION */}\n        <footer>\n          <p className=\"wrapper\">Created by <a href=\"https://github.com/armontei\">Amanda Monteiro</a> at <a href=\"https://junocollege.com/\">Juno College</a></p>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}