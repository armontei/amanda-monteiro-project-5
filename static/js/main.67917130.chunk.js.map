{"version":3,"sources":["firebase.js","components/Header.js","components/Rooms.js","components/Tasks.js","components/Form.js","components/Suggestion.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","state","headerText","subheaderText","className","this","props","Component","Rooms","roomName","children","library","add","faCheckSquare","farSquare","faTrashAlt","Task","isChecked","taskName","removeTaskHandler","taskId","labelTaskHandler","room","tabindex","aria-label","type","id","checked","onChange","htmlFor","icon","onClick","Form","inputChangeHandler","newTaskHandler","e","Suggestion","suggestionHandler","Footer","href","App","handleInput","setState","userInput","target","value","handleAdd","preventDefault","dbRef","database","ref","roomId","alert","newTask","task","complete","child","push","document","getElementById","completeTask","taskKey","status","update","removeTask","remove","newSuggestion","bathroomTasks","bedroomTasks","kitchenTasks","livingRoomTasks","Math","floor","random","length","rooms","on","data","firebaseDataObj","val","generateTaskList","obj","Object","keys","map","key","isComplete","newArray","newObj","name","tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67917130.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// configuration object\r\nconst config = {\r\n    apiKey: \"AIzaSyDjFLGw9uZxi2bKP7M5iAYTKa8mZ1b8v74\",\r\n    authDomain: \"cleannie-8323c.firebaseapp.com\",\r\n    databaseURL: \"https://cleannie-8323c.firebaseio.com\",\r\n    projectId: \"cleannie-8323c\",\r\n    storageBucket: \"cleannie-8323c.appspot.com\",\r\n    messagingSenderId: \"739127105460\",\r\n    appId: \"1:739127105460:web:9eedebd42440fa4d51c4e1\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;","import { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            headerText: '',\r\n            subheaderText: ''\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <header>\r\n                <div className=\"headerOverlay\">\r\n                    <h1 className=\"wrapper\" >{this.props.headerText}</h1>\r\n                    <h2 className=\"wrapper\">{this.props.subheaderText}</h2>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\n","const Rooms = ({roomName, children}) => {\r\n    return (\r\n        <div className=\"taskContainer\">\r\n\r\n            <h3>{roomName}</h3>\r\n\r\n            {children}\r\n\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Rooms;","// font awesome library\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faCheckSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSquare as farSquare } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nlibrary.add(faCheckSquare, farSquare, faTrashAlt);\r\n\r\n\r\nconst Task = ({isChecked, taskName, removeTaskHandler, taskId, labelTaskHandler, room}) => {\r\n\r\n    if (taskId === \"hidden\" ) {\r\n        return null\r\n    }  return (\r\n        <ul>\r\n            <li>\r\n                <div className=\"taskUpdate\" tabindex=\"0\" aria-label=\"Mark task as complete\">\r\n                    <input type=\"checkbox\" id={taskId} tabindex=\"-1\" checked={isChecked === \"yes\" ? true : false} onChange={() => { labelTaskHandler(taskId, room, isChecked) }} />\r\n                    <label htmlFor={taskId}>\r\n                        <span className={isChecked + \"Btn\"}>\r\n                            <FontAwesomeIcon icon={(isChecked === \"yes\") ? \"check-square\" : ['far', 'square']} />\r\n                        </span>\r\n                        <span className={isChecked}>{taskName}</span>\r\n                    </label>\r\n                </div>\r\n                <button aria-label=\"Remove this task\" className=\"removeBtn\"  onClick={ () => { removeTaskHandler(taskId, room)} } >\r\n                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                </button>\r\n            </li>\r\n        </ul>\r\n    )\r\n    }\r\n\r\nexport default Task;","const Form = ({room, inputChangeHandler, newTaskHandler, e}) => {\r\n\r\n    return (\r\n\r\n        <form key={room}>\r\n            <label htmlFor=\"newTask\" className=\"srOnly\">Add new task</label>\r\n            <input type=\"text\" id=\"newTask\" onChange={(e) => { inputChangeHandler(e) }}  id={room} placeholder=\"Enter a new task\" />\r\n            <button onClick={(e) => { newTaskHandler(e, room) }} className=\"addBtn\">Add Task</button>\r\n        </form>\r\n    )   \r\n}\r\n\r\nexport default Form;\r\n\r\n","const Suggestion = ({room, suggestionHandler}) => {\r\n\r\n    return (\r\n        <button onClick={() => { suggestionHandler(room) }} className=\"suggestBtn\" room>Need a suggestion?</button>\r\n    )\r\n}\r\n\r\nexport default Suggestion;","const Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p className=\"wrapper\">Created by <a href=\"https://github.com/armontei\">Amanda Monteiro</a> at <a href=\"https://junocollege.com/\">Juno College</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import './App.scss';\nimport { Component, Fragment } from 'react';\nimport firebase from './firebase';\nimport Header from './components/Header.js'\nimport Rooms from './components/Rooms.js'\nimport Task from './components/Tasks.js'\nimport Form from './components/Form.js'\nimport Suggestion from './components/Suggestion'\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  // getting all the rooms\n  constructor() {\n    super();\n    this.state = {\n      rooms: [],\n      userInput: ''\n    }\n  }\n\n  componentDidMount() {\n    // firebase database\n    const dbRef = firebase.database().ref();\n\n    // getting data from firebase\n    dbRef.on('value', (data) => {\n\n      const firebaseDataObj = data.val();\n\n      const generateTaskList = (obj) => {\n        \n        return Object.keys(obj).map(key => {\n            return {\n            id: key,\n            taskName: obj[key].task,\n            isComplete: obj[key].complete\n            }\n\n        })\n      }\n\n      const newArray = []\n\n      for (const room in firebaseDataObj) {\n\n        const newObj = {\n          name: room,\n          tasks: generateTaskList(firebaseDataObj[room])\n        }\n\n        newArray.push(newObj);\n      }\n      \n      this.setState({\n        rooms: newArray\n      })\n\n    })\n  }\n\n\n  // getting input from the user for new tasks they want to add\n  handleInput = (e) => {\n\n    this.setState({\n      userInput: e.target.value,\n    })\n  }\n\n  // adding the new task to the page\n  handleAdd = (e, room) => {\n    // prevent form fro refreshing the page on submit\n    e.preventDefault();\n    \n    const dbRef = firebase.database().ref();\n\n    let roomId = `/${room}/`\n\n    if (this.state.userInput === \"\") {\n      alert(\"Please enter a task!\")\n    } else {\n      // object structure which new task will be added\n      const newTask = {\n        task: this.state.userInput,\n        complete: \"no\"\n      }\n\n      // adding a new task in the form of a child element to the specified room\n      dbRef.child(roomId).push(newTask);\n    }\n\n    // resetting user input and clearing form\n    this.setState({\n      userInput: ''\n    })\n\n    document.getElementById(room).value = '';\n\n  }\n\n  // complete task function\n  completeTask = (taskKey, room, status) => {\n    const dbRef = firebase.database().ref();\n    let roomId = `/${room}/`\n\n    if (status === \"no\") {\n      dbRef.child(roomId + taskKey).update({\n        complete: \"yes\"\n      })\n    } else {\n      dbRef.child(roomId + taskKey).update({\n        complete: \"no\"\n      })\n\n    }\n  }\n\n  // removing tasks functions\n  removeTask = (taskKey, room) => {\n\n    const dbRef = firebase.database().ref();\n    let roomId = `/${room}/`\n  \n    dbRef.child(roomId + taskKey).remove()\n  }\n\n\n  // suggest a new random task function\n  newSuggestion = (room) => {\n    \n    const bathroomTasks = [\"clean shower\", \"wash towels\", \"clean sink\", \"wash shower curtain\", \"clean toilet\", \"clean mirror\", \"sweep floor\", \"mop floor\"];\n    const bedroomTasks = [\"wash blankets\", \"change bed sheets\", \"tidy closet\", \"dust surfaces\", \"organize drawers\", \"clean windows\", \"vacuum carpet\"];\n    const kitchenTasks = [\"wash dishes\", \"sweep floor\", \"mop floor\", \"wipe counter\", \"clean sink\", \"clean microwave\", \"clean stove\", \"take out garbage\"];\n    const livingRoomTasks = [\"dust surfaces\", \"vacuum carpet\", \"sweep floor\", \"mop floor\", \"organize shelves\", \"tidy coffee table\", \"clean windows\"];\n\n    if ( room === \"Bathroom\") {\n      document.getElementById(room).value = bathroomTasks[Math.floor(Math.random() * bathroomTasks.length)];\n\n      this.setState({\n        userInput: document.getElementById(room).value\n      })\n    } else if (room === \"Bedroom\") {\n      document.getElementById(room).value = bedroomTasks[Math.floor(Math.random() * bedroomTasks.length)];\n\n      this.setState({\n        userInput: document.getElementById(room).value\n      })\n    } else if (room === \"Kitchen\") {\n      document.getElementById(room).value = kitchenTasks[Math.floor(Math.random() * kitchenTasks.length)];\n\n      this.setState({\n        userInput: document.getElementById(room).value\n      })\n    } else if (room === \"Living Room\") {\n      document.getElementById(room).value = livingRoomTasks[Math.floor(Math.random() * livingRoomTasks.length)];\n\n      this.setState({\n        userInput: document.getElementById(room).value\n      })\n    }\n\n  }\n\n\n  render() {\n\n    return (\n\n    <Fragment>\n      {/* HEADER SECTION */}\n      <Header headerText=\"I Dream of Cleannie\" subheaderText=\"Keep track of everything in your home you need to clean\"/>\n\n      {/* MAIN SECTION */}\n      <main className=\"wrapper content\">\n      \n          {this.state.rooms.map((room) => {\n            return (\n              <Rooms roomName={room.name}>\n\n                {room.tasks.map(task => {\n\n                  return <Task taskName={task.taskName} removeTaskHandler={this.removeTask} labelTaskHandler={this.completeTask} taskId={task.id} isChecked={task.isComplete} room={room.name} />\n\n                })}\n\n                {/* ADD TASK SECTION */}\n                <Form inputChangeHandler={this.handleInput} room={room.name} newTaskHandler={this.handleAdd} />\n\n                <Suggestion room={room.name} suggestionHandler={this.newSuggestion} />\n\n              </Rooms> \n              \n            )\n            \n          })}\n          \n      </main>\n\n      {/* FOOTER SECTION */}\n      <Footer />\n\n    </Fragment>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}